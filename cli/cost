#!/usr/bin/env node
'use strict';
process.title = 'cost';
var fs = require('fs');
var Promise = require('bluebird');
var clc = require('cli-color');
var prettyBytes = require('pretty-bytes');
var pathJoin = require('path').join;
var cost = require('../lib/cost');
var modifierRE = /^(:([^:]*):)?([\s\S]*)/

var options = require('nopt')({
	'help': Boolean,
	'bytes': Boolean,
	'simple': Boolean,
	'raw': Boolean
}, {
	'?': '--help',
	'b': '--bytes',
	's': '--simple',
	'r': '--raw'
});
var args = options.argv.remain;
var pathArgsExist = !!args.some(stripModifier);
var usedFiles = false;

if (options.help) {
	console.log('' + fs.readFileSync(pathJoin(__dirname, 'help.txt')));
} else {
	interpretStdin();
}

function interpretStdin() {
	process.stdin.once('readable', function () {		
		var chunk = process.stdin.read();
		if (chunk == null && pathArgsExist) {
			Promise.each(args.map(resultsFromArg), displayResults);
			process.stdin.pause();
		} else {
			if (pathArgsExist) {
				console.warn(clc.yellow('WARNING: path arguments are ignored when piping to stdin.'));
			}
			if (args.length > 1 && !args.every(stripModifier)) {
				console.warn(clc.yellow('WARNING: when using stdin, modifiers after the first argument are ignored.'));
			}
			if (chunk == null) {
				console.log('(when done with input, press enter, then ^D)');
			}
			resultsFromStdin(chunk).then(displayResults);
		}
	});
}

function resultsFromArg(arg) {
	usedFiles = true;
	var match = modifierRE.exec(arg);
	var opts = {path: match[3]};
	return prepareCostResult(opts, match[2]);
}

function resultsFromStdin(firstChunk) {
	return new Promise(function (resolve, reject) {
		var stdinChunks = [];
		
		if (firstChunk != null) stdinChunks.push(firstChunk);
		
		process.stdin.on('readable', function () {
			var chunk = process.stdin.read();
			chunk != null && stdinChunks.push(chunk);
		});
		
		process.stdin.on('end', function () {
			var match = modifierRE.exec(args[0] || '');
			var opts = {value: '' + Buffer.concat(stdinChunks)};
			prepareCostResult(opts, match[3] ? null : match[2]).then(resolve);
		});
	});
}

function prepareCostResult(opts, modifiers) {
	if (options.raw) {
		opts.minify = false;
		opts.gzip = false;
	}
	if (modifiers) {
		modifiers
			.split(',')
			.map(function (str) {return str.trim().toLowerCase();})
			.forEach(function (option) {
				switch (option) {
					case 'js': opts.minify = 'js'; break;
					case 'css': opts.minify = 'css'; break;
					case 'max': opts.minify = false; break;
					case 'gzip': opts.gzip = true; break;
					case 'unzip': opts.gzip = false; break;
					default: console.warn(clc.yellow('WARNING: unrecognized modifier: "%s"'), option);
				}
			});
	}
	
	return cost(opts)
		.then(function (data) {
				if (!options.bytes) {
					data.value = prettyBytes(data.value);
				}
				if (!options.simple) {
					var details = [];
					if (data.minify) {details.push('minified');}
					if (data.gzip) {details.push('gzipped');}
					if (details.length) {
						data.value += ' (' + details.join(', ') + ')';
					}
				}
				return data;
			}, function (err) {
				return {
					path: opts.path,
					value: 'ERROR: ' + (err.statusCode ? err.statusCode + ' ' : '') + err.message,
					isError: true
				};
			});
}

function displayResults(data) {
	if (usedFiles && args.length > 1) {
		var style = clc.underline[data.isError ? 'red' : 'green'];
		console.log(style(data.path || '""') + '\n' + data.value);
	} else {
		console.log(data.value);
	}
}

function stripModifier(arg) {
	return arg.replace(modifierRE, '$3');
}
